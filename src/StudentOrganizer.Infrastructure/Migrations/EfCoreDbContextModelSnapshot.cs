// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StudentOrganizer.Infrastructure.Contexts;

namespace StudentOrganizer.Infrastructure.Migrations
{
    [DbContext(typeof(EfCoreDbContext))]
    partial class EfCoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.Property<Guid>("AdministratedGroupsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdministratorsId")
                        .HasColumnType("uuid");

                    b.HasKey("AdministratedGroupsId", "AdministratorsId");

                    b.HasIndex("AdministratorsId");

                    b.ToTable("GroupUser");
                });

            modelBuilder.Entity("GroupUser1", b =>
                {
                    b.Property<Guid>("GroupsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uuid");

                    b.HasKey("GroupsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("GroupUser1");
                });

            modelBuilder.Entity("StudentOrganizer.Core.Models.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Assignment");
                });

            modelBuilder.Entity("StudentOrganizer.Core.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DayOfTheWeek")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Lecturer")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ScheduleId")
                        .HasColumnType("uuid");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("StudentOrganizer.Core.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("StudentOrganizer.Core.Models.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("StudentOrganizer.Core.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ScheduleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("ScheduleId")
                        .IsUnique();

                    b.ToTable("Team");
                });

            modelBuilder.Entity("StudentOrganizer.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.HasOne("StudentOrganizer.Core.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("AdministratedGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOrganizer.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("AdministratorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupUser1", b =>
                {
                    b.HasOne("StudentOrganizer.Core.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentOrganizer.Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentOrganizer.Core.Models.Assignment", b =>
                {
                    b.HasOne("StudentOrganizer.Core.Models.Course", null)
                        .WithMany("Assignments")
                        .HasForeignKey("CourseId");
                });

            modelBuilder.Entity("StudentOrganizer.Core.Models.Course", b =>
                {
                    b.HasOne("StudentOrganizer.Core.Models.Group", null)
                        .WithMany("Course")
                        .HasForeignKey("GroupId");

                    b.HasOne("StudentOrganizer.Core.Models.Schedule", null)
                        .WithMany("Courses")
                        .HasForeignKey("ScheduleId");

                    b.OwnsOne("StudentOrganizer.Core.Models.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Link")
                                .HasColumnType("text");

                            b1.Property<string>("Room")
                                .HasColumnType("text");

                            b1.HasKey("CourseId");

                            b1.ToTable("Course");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");

                            b1.OwnsOne("StudentOrganizer.Core.Models.Address", "Address", b2 =>
                                {
                                    b2.Property<Guid>("LocationCourseId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("BuildingNumber")
                                        .HasColumnType("text");

                                    b2.Property<string>("City")
                                        .HasColumnType("text");

                                    b2.Property<string>("StreetName")
                                        .HasColumnType("text");

                                    b2.HasKey("LocationCourseId");

                                    b2.ToTable("Course");

                                    b2.WithOwner()
                                        .HasForeignKey("LocationCourseId");
                                });

                            b1.Navigation("Address");
                        });

                    b.Navigation("Location");
                });

            modelBuilder.Entity("StudentOrganizer.Core.Models.Schedule", b =>
                {
                    b.HasOne("StudentOrganizer.Core.Models.Group", null)
                        .WithMany("Schedules")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StudentOrganizer.Core.Models.Team", b =>
                {
                    b.HasOne("StudentOrganizer.Core.Models.Group", null)
                        .WithMany("Teams")
                        .HasForeignKey("GroupId");

                    b.HasOne("StudentOrganizer.Core.Models.Schedule", "Schedule")
                        .WithOne()
                        .HasForeignKey("StudentOrganizer.Core.Models.Team", "ScheduleId");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("StudentOrganizer.Core.Models.Course", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("StudentOrganizer.Core.Models.Group", b =>
                {
                    b.Navigation("Course");

                    b.Navigation("Schedules");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("StudentOrganizer.Core.Models.Schedule", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
